@using ConnectorLib.Ione.Categories
@inject ICategoryService service
@inject ICategoryManager manager
@using MudBlazor

<MudGrid>
  <MudItem xs="8">
      
      <MudTable Items="@categories" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
          <MudTh>Kategorie</MudTh>
          <MudTh>Api Nummer</MudTh>
          <MudTh>Ione Nummer</MudTh>
          <MudTh></MudTh>
          <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
          <MudTd DataLabel="Name">@context.Name</MudTd>
          <MudTd DataLabel="Api Object">@context.VectronNo</MudTd>
          <MudTd DataLabel="Branchadressen">@context.IoneRefId</MudTd>
          <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => EditEntry(context)"></MudIconButton>
          </MudTd>
          <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteEntry(context.Id)"></MudIconButton>
          </MudTd>
        </RowTemplate>
      </MudTable>
 @*    <MudPaper Class="pa-4 mt-4"> *@
 @* <MudIconButton Icon="@Icons.Material.Filled.Create" Size="Size.Small" OnClick="() => CreateEntry()"></MudIconButton> *@
 @*    </MudPaper> *@
  </MudItem>
  <MudItem xs="8">
    <MudPaper Class="pa-4 mt-4">
      <MudText>Neue Kategorie anlegen</MudText>
      <MudTextField T="string" Label="Name" @bind-Value="category.Name"></MudTextField>
      <MudTextField T="int" Label="Vectron Nummer" @bind-Value="category.VectronNo"></MudTextField>
      <MudIconButton Class="mt-4" Icon="@Icons.Material.Filled.Save" Size="Size.Small" OnClick="() => SaveEntry()">Speichern</MudIconButton>
    </MudPaper>

  </MudItem>
  <MudItem xs="8">
       <MudIconButton Class="mt-4" Icon="@Icons.Material.Filled.Send" Size="Size.Small" OnClick="() => SendCategories()">Speichern</MudIconButton>
  </MudItem>
</MudGrid>


@code {
  IEnumerable<Category> categories;
  bool editMode;

  Category category = getDefauCategory();



  protected override async Task OnInitializedAsync()
  {
    categories = service.GetAll();
    editMode = false;
  }

  private async Task EditEntry(Category categoryToEdit)
  {
    category = categoryToEdit;
    await OnInitializedAsync();
    editMode = true;
  }

  private async Task DeleteEntry(int id)
  {
    service.Delete(id);
    await OnInitializedAsync();
  }

  private async Task CreateEntry()
  {

  }

  private async Task SaveEntry()
  {
    var newCategory = category;
    if (editMode)
    {
      service.Update(category);
    }
    else
    {
      service.Save(newCategory);
    }
    category = getDefauCategory();
    await OnInitializedAsync();
  }

  private static Category getDefauCategory()
  {
    return new()
    {
      Name = "",
      VectronNo = 0,
      IoneRefId = 0,
    };
  }

  private async Task SendCategories()
  {
    manager.SynchronizeArticlesFromDatabaseToIoneClient();
    await OnInitializedAsync();
  }

}
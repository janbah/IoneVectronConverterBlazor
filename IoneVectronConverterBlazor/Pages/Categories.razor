@page "/"
@using IoneVectronConverter.Ione.Services
@using IoneVectronConverter.Ione.Models
@inject ICategoryService categoryService



<MudGrid>

  <MudItem xs="8">
    <MudText Typo="Typo.h4">Ione Api</MudText>
    <MudPaper Class="pa-4 mt-4">
      
      <MudTable Items="@categories" Hover="true" Breakpoint="Breakpoint.Sm">
        <HeaderContent>
          <MudTh>Kategorie</MudTh>
          <MudTh>Api Nummer</MudTh>
          <MudTh>Ione Nummer</MudTh>
          <MudTh></MudTh>
          <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
          <MudTd DataLabel="Name">@context.Name</MudTd>
          <MudTd DataLabel="Api Object">@context.VectronNo</MudTd>
          <MudTd DataLabel="Branchadressen">@context.IoneRefId</MudTd>
          <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="() => EditEntry(context)"></MudIconButton>
          </MudTd>
          <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="() => DeleteEntry(context.Id)"></MudIconButton>
          </MudTd>
        </RowTemplate>
      </MudTable>
    </MudPaper>
    <MudPaper Class="pa-4 mt-4">
      <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Text" Class="ml-auto" @onclick="() => CreateEntry()">Kategorie anlegen</MudButton>
    </MudPaper>
  </MudItem>
  <MudItem xs="8">
    
    <MudPaper Class="pa-4 mt-4">

      <MudTextField T="string" Label="Name" @bind-Value="category.Name"></MudTextField>
      <MudTextField T="int" Label="Ione Nummer" @bind-Value="category.IoneRefId"></MudTextField>
      <MudTextField T="int" Label="Vectron Nummer" @bind-Value="category.VectronNo"></MudTextField>
    </MudPaper>
    <MudPaper Class="pa-4 mt-4">
      <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Class="ml-auto" @onclick="() => SaveEntry()">Speichern</MudButton>
    </MudPaper>
  </MudItem>
</MudGrid>


@code {
  IEnumerable<Category> categories;
  bool editMode;
  
  Category category = getDefauCategory();



  protected override async Task OnInitializedAsync()
  {
    categories = categoryService.GetAll();
    editMode = false;  
  }

  private async Task EditEntry(Category categoryToEdit)
  {
    category = categoryToEdit;
    await OnInitializedAsync();
    editMode = true;
  }

  private async Task DeleteEntry(int id)
  {
    categoryService.Delete(id);
    await OnInitializedAsync();
  }

  private async Task CreateEntry()
  {

  }

  private async Task SaveEntry()
  {
    var newCategory = category;
    if (editMode)
    {
      categoryService.Update(category);
    }
    else
    {
      categoryService.Save(newCategory);
    }
    category = getDefauCategory();
    await OnInitializedAsync();
  }
  
  private static Category getDefauCategory()
  {
    return new()
    {
      Name = "",
      VectronNo = 0 ,
      IoneRefId = 0,
    };
  }

}